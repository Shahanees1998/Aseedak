// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum GameStatus {
  WAITING
  STARTING
  IN_PROGRESS
  FINISHED
  EXPIRED
}

enum PlayerStatus {
  ALIVE
  ELIMINATED
  WINNER
}

enum JoinStatus {
  INVITED
  JOINED
  LEFT
}

enum AvatarType {
  IMAGE1
  IMAGE2
  IMAGE3
  IMAGE4
  IMAGE5
  IMAGE6
  IMAGE7
  IMAGE8
  IMAGE9
  IMAGE10
  IMAGE11
  IMAGE12
  IMAGE13
  IMAGE14
  IMAGE15
  IMAGE16
}

model User {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  email       String      @unique
  password    String
  firstName   String
  lastName    String
  username    String      @unique
  phoneNumber String? // Optional phone number
  role        UserRole    @default(USER)
  avatar      AvatarType?
  isActive    Boolean     @default(true)

  // Profile image (Cloudinary)
  profileImageUrl      String?
  profileImagePublicId String?

  // Password reset
  resetToken       String?
  resetTokenExpiry DateTime?

  // Email verification
  emailVerified     Boolean   @default(false)
  emailVerifyToken  String?
  emailVerifyExpiry DateTime?

  // Game statistics
  gamesPlayed Int @default(0)
  gamesWon    Int @default(0)
  totalKills  Int @default(0)

  // In-app purchases
  maxMembers Int @default(4) // Maximum members user can add to games

  // FCM Push Notifications
  fcmTokens            String[] @default([]) // Array of FCM device tokens
  fcmEnabled           Boolean  @default(true) // Whether user has notifications enabled
  notificationSettings Json? // User notification preferences

  // Relations
  gameRooms     GameRoom[]
  gamePlayers   GamePlayer[]
  notifications Notification[]
  purchases     UserPurchase[]
  userCharacters UserCharacter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Performance indexes (email & username already indexed via @unique)
  @@index([role])
  @@index([isActive])
  @@index([emailVerified])
  @@index([createdAt])
  @@map("users")
}

model Avatar {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  type        AvatarType @unique
  name        String
  description String
  imageUrl    String
  isUnlocked  Boolean    @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("avatars")
}

model Character {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String         @unique
  description String
  imageUrl    String
  isActive    Boolean        @default(true)
  packId      String?        @db.ObjectId
  pack        CharacterPack? @relation(fields: [packId], references: [id])
  isUnlocked  Boolean        @default(false)
  isPaid      Boolean        @default(false)
  price       Int            @default(0) // Price in cents

  // Relations
  gamePlayers GamePlayer[]
  userCharacters UserCharacter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("characters")
}

model CharacterPack {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String      @unique
  description String
  imageUrl    String
  price       Int         @default(0) // Price in cents
  isActive    Boolean     @default(true)
  characters  Character[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("character_packs")
}

model WordDeck {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String
  price       Int     @default(0) // Price in cents
  isActive    Boolean @default(true)
  words       Word[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("word_decks")
}

model UserPurchase {
  id                    String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                String  @db.ObjectId
  user                  User    @relation(fields: [userId], references: [id])
  type                  String // "character", "character_pack", "word_deck", "member_upgrade"
  itemId                String? @db.ObjectId // Nullable for member upgrades
  stripePaymentIntentId String?
  amount                Int // Amount paid in cents
  status                String  @default("completed") // "pending", "completed", "failed", "refunded"
  metadata              Json? // Additional data like new maxMembers value

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userCharacters UserCharacter[]

  @@map("user_purchases")
}

model UserCharacter {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  characterId String    @db.ObjectId
  character   Character @relation(fields: [characterId], references: [id])
  purchaseId  String?   @db.ObjectId
  purchase    UserPurchase? @relation(fields: [purchaseId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, characterId])
  @@map("user_characters")
}

model Word {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  word1    String
  word2    String
  word3    String
  isActive Boolean   @default(true)
  deckId   String?   @db.ObjectId
  deck     WordDeck? @relation(fields: [deckId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("words")
}

model GameRoom {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  code       String     @unique
  maxPlayers Int        @default(8)
  status     GameStatus @default(WAITING)
  createdBy  String     @db.ObjectId
  creator    User       @relation(fields: [createdBy], references: [id])

  // Game settings
  wordSet      String[] // Array of word IDs
  currentRound Int      @default(1)
  timeLimit    Int      @default(60) // seconds per turn

  // Relations
  players           GamePlayer[]
  gameLogs          GameLog[]
  killConfirmations KillConfirmation[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  startedAt  DateTime?
  finishedAt DateTime?

  // Performance indexes (code already indexed via @unique)
  @@index([status])
  @@index([createdBy])
  @@index([createdAt])
  @@map("game_rooms")
}

model GamePlayer {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  userId String   @db.ObjectId
  user   User     @relation(fields: [userId], references: [id])
  roomId String   @db.ObjectId
  room   GameRoom @relation(fields: [roomId], references: [id])

  // Player state
  status     PlayerStatus @default(ALIVE)
  joinStatus JoinStatus   @default(INVITED)
  position   Int // Order in the game
  targetId   String?      @db.ObjectId // ID of the player they need to eliminate
  target     GamePlayer?  @relation("PlayerTarget", fields: [targetId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  hunters    GamePlayer[] @relation("PlayerTarget")

  // Assigned character (avatar for this game)
  characterId String?    @db.ObjectId
  character   Character? @relation(fields: [characterId], references: [id])

  // Assigned words
  word1 String?
  word2 String?
  word3 String?

  // Game statistics
  kills        Int       @default(0)
  eliminatedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations for kill confirmations
  killerConfirmations KillConfirmation[] @relation("KillerConfirmations")
  targetConfirmations KillConfirmation[] @relation("TargetConfirmations")

  @@unique([userId, roomId])
  // Performance indexes
  @@index([userId])
  @@index([roomId])
  @@index([status])
  @@index([joinStatus])
  @@index([targetId])
  @@map("game_players")
}

model KillConfirmation {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  roomId String   @db.ObjectId
  room   GameRoom @relation(fields: [roomId], references: [id])

  // Players involved
  killerId String     @db.ObjectId
  killer   GamePlayer @relation("KillerConfirmations", fields: [killerId], references: [id])
  targetId String     @db.ObjectId
  target   GamePlayer @relation("TargetConfirmations", fields: [targetId], references: [id])

  // Confirmation status
  status  String // "pending", "accepted", "rejected"
  message String? // Optional message from killer

  createdAt   DateTime  @default(now())
  respondedAt DateTime?

  @@map("kill_confirmations")
}

model GameLog {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  roomId String   @db.ObjectId
  room   GameRoom @relation(fields: [roomId], references: [id])

  // Log details
  type    String // "elimination", "kill_request", "game_start", "game_end", "player_join", "player_leave"
  message String
  data    Json? // Additional data

  // Related players
  playerId String? @db.ObjectId
  targetId String? @db.ObjectId

  createdAt DateTime @default(now())

  @@map("game_logs")
}

model Notification {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  userId  String  @db.ObjectId
  user    User    @relation(fields: [userId], references: [id])
  title   String
  message String
  type    String // "game_invite", "elimination", "game_start", "game_end", "system"
  isRead  Boolean @default(false)
  data    Json? // Additional data (roomId, gameId, etc.)

  createdAt DateTime @default(now())

  @@map("notifications")
}

model TermsAndConditions {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  version  String  @unique
  content  String
  isActive Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("terms_and_conditions")
}

model SystemSettings {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  key   String @unique
  value Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}
